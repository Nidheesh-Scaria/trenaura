<head>
    
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    <style>
        /* General Styles */
        .content-main {
            padding: 20px;
        }

        .content-header {
            margin-bottom: 20px;
        }

        .content-header h2 {
            font-size: 24px;
            font-weight: 600;
        }

        .card {
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .card-body {
            padding: 20px;
        }

        .form-label {
            font-weight: 500;
            margin-bottom: 8px;
            display: block;
        }

        .form-control, .form-select {
            border: 1px solid #ced4da;
            border-radius: 4px;
            padding: 8px 12px;
            width: 100%;
        }

        .btn {
            padding: 8px 16px;
            border-radius: 4px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background-color: #0d6efd;
            color: white;
            border: none;
        }

        .btn-primary:hover {
            background-color: #0b5ed7;
        }

        .hover-up:hover {
            transform: translateY(-2px);
        }

        /* Error Message Styles */
        .error-message {
            color: red;
            font-size: 0.9rem;
            margin-top: 4px;
            display: none;
        }

        /* Thumbnail Styles */
        .thumbnails-container {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            padding: 10px 0;
        }

        .thumbnail {
            position: relative;
            width: 100px;
            height: 100px;
        }

        .thumbnail img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 4px;
            border: 1px solid #ddd;
        }

        .thumbnail-actions {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            display: flex;
            justify-content: center;
            gap: 5px;
            padding: 5px;
            background: rgba(0,0,0,0.5);
        }

        .thumbnail-actions button {
            padding: 2px 5px;
            font-size: 12px;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1050;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.8);
        }

        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 20px;
            border-radius: 5px;
            max-width: 90%;
            max-height: 90%;
        }

        .modal-image-container {
            max-width: 80vw;
            max-height: 70vh;
        }

        .modal-image-container img {
            max-width: 100%;
            max-height: 100%;
        }

        .modal-actions {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-top: 15px;
        }

        /* Responsive Adjustments */
        @media (max-width: 768px) {
            .row {
                flex-direction: column;
            }
            
            .col-md-6 {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <section class="content-main">
        <div class="row">
            <div class="col-12">
                <div class="content-header">
                    <h2 class="content-title">Add New Product</h2>
                </div>
            </div>

            <div class="col-lg-12">
                <div class="card mb-4">
                    <div class="card-body">
                        <form method="POST" action="/admin/addProducts" enctype="multipart/form-data" id="productForm">
                            <!-- Product Info -->
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="product_name" class="form-label">Product Name</label>
                                    <input type="text" name="productName" class="form-control border" id="product_name" >
                                    <div id="productName-error" class="error-message"></div>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Brand</label>
                                    <select class="form-select border" name="brand" >
                                        {{#each brands}}
                                            <option value="{{this.brandName}}">{{this.brandName}}</option>
                                        {{/each}}
                                    </select>
                                    <div id="brand-error" class="error-message"></div>
                                </div>
                            </div>

                            <!-- Pricing and Quantity -->
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label class="form-label">Regular price</label>
                                    <input name="regularPrice" type="number" step="0.01" class="form-control border" >
                                    <div id="regularPrice-error" class="error-message"></div>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Sale price</label>
                                    <input name="salePrice" type="number" step="0.01" class="form-control border" >
                                    <div id="salePrice-error" class="error-message"></div>
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label class="form-label">Quantity</label>
                                    <input name="quantity" type="number" class="form-control border" min="0" >
                                    <div id="quantity-error" class="error-message"></div>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Color</label>
                                    <input name="color" type="text" class="form-control border">
                                    <div id="color-error" class="error-message"></div>
                                </div>
                            </div>

                            <!-- Description -->
                            <div class="mb-4">
                                <label class="form-label">Full description</label>
                                <textarea name="description" class="form-control border" rows="3" id="descriptionid"></textarea>
                                <div id="description-error" class="error-message"></div>
                            </div>

                            <!-- Category -->
                            <div class="mb-4">
                                <label class="form-label">Category</label>
                                <select class="form-select border" name="category" >
                                    {{#each categories}}
                                        <option value="{{this.name}}">{{this.name}}</option>
                                    {{/each}}
                                </select>
                                <div id="category-error" class="error-message"></div>
                            </div>

                            <!-- Image Uploads -->
                            <div class="mb-3">
                                <label for="multiImageInput" class="form-label">Upload Product Images (min 3)</label>
                                <input class="form-control" type="file" name="images" id="multiImageInput" multiple
                                    accept="image/png, image/jpeg, image/jpg">
                                <div id="images-error" class="error-message"></div>
                            </div>

                            <div class="thumbnails-container" id="thumbnailPreview"></div>

                            <div class="mt-4">
                                <button class="btn btn-primary btn-lg" type="submit">Publish Product</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Cropping Modal -->
    <div id="cropModal" class="modal">
        <div class="modal-content">
            <div class="modal-image-container">
                <img id="modalImage" src="">
            </div>
            <div class="modal-actions">
                <button class="btn btn-secondary" onclick="closeModal()">Cancel</button>
                <button class="btn btn-primary" onclick="saveCrop()">Save Crop</button>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>


    <script>
        // Global variables
        let cropper;
        let currentImageIndex;
        const uploadedFiles = [];
        const croppedImages = [];

        // Initialize form
        document.getElementById('productForm').addEventListener('submit', function(e) {
            e.preventDefault();
            if (validateForm()) {
                this.submit();
            }
        });

        // Handle file selection
        document.getElementById('multiImageInput').addEventListener('change', function(e) {
            handleMultipleImageUpload(e);
        });

        function handleMultipleImageUpload(event) {
            const files = event.target.files;
            const previewContainer = document.getElementById('thumbnailPreview');
            const errorElement = document.getElementById('images-error');
            
            // Clear previous previews
            previewContainer.innerHTML = '';
            uploadedFiles.length = 0;
            croppedImages.length = 0;
            
            // Validate minimum 3 images
            if (files.length < 3) {
                displayErrorMessage('images-error', 'Please upload at least 3 images');
                return;
            } else {
                clearErrorMessage('images-error');
            }
            
            // Process each file
            Array.from(files).forEach((file, index) => {
                uploadedFiles.push(file);
                croppedImages.push(null); // Initialize cropped images array
                
                const reader = new FileReader();
                reader.onload = function(e) {
                    createThumbnail(index, e.target.result);
                };
                reader.readAsDataURL(file);
            });
        }

        function createThumbnail(index, imageSrc) {
            const previewContainer = document.getElementById('thumbnailPreview');
            
            const thumbnailDiv = document.createElement('div');
            thumbnailDiv.className = 'thumbnail';
            
            const img = document.createElement('img');
            img.src = imageSrc;
            img.dataset.index = index;
            
            const actionsDiv = document.createElement('div');
            actionsDiv.className = 'thumbnail-actions';
            
            const cropBtn = document.createElement('button');
            cropBtn.className = 'btn btn-sm btn-primary';
            cropBtn.textContent = 'Crop';
            cropBtn.onclick = () => openCropper(index, imageSrc);
            
            const removeBtn = document.createElement('button');
            removeBtn.className = 'btn btn-sm btn-danger';
            removeBtn.textContent = 'Remove';
            removeBtn.onclick = () => removeImage(index);
            
            actionsDiv.appendChild(cropBtn);
            actionsDiv.appendChild(removeBtn);
            thumbnailDiv.appendChild(img);
            thumbnailDiv.appendChild(actionsDiv);
            previewContainer.appendChild(thumbnailDiv);
        }

        function openCropper(index, imageSrc) {
            currentImageIndex = index;
            const modal = document.getElementById('cropModal');
            const modalImage = document.getElementById('modalImage');
            
            modal.style.display = 'block';
            modalImage.src = imageSrc;
            
            // Initialize cropper when image is loaded
            modalImage.onload = function() {
                if (cropper) {
                    cropper.destroy();
                }
                
                cropper = new Cropper(modalImage, {
                    aspectRatio: 1,
                    viewMode: 1,
                    autoCropArea: 0.8,
                    responsive: true,
                    guides: false
                });
            };
        }

        function closeModal() {
            document.getElementById('cropModal').style.display = 'none';
            if (cropper) {
                cropper.destroy();
                cropper = null;
            }
        }

        function saveCrop() {
            if (cropper) {
                const canvas = cropper.getCroppedCanvas({
                    width: 800,
                    height: 800,
                    minWidth: 256,
                    minHeight: 256,
                    fillColor: '#fff'
                });
                
                canvas.toBlob(blob => {
                    // Store the cropped image
                    croppedImages[currentImageIndex] = blob;
                    
                    // Update the thumbnail preview
                    const thumbnails = document.querySelectorAll('.thumbnail img');
                    thumbnails[currentImageIndex].src = URL.createObjectURL(blob);
                    
                    closeModal();
                }, 'image/jpeg', 0.9);
            }
        }

        function removeImage(index) {
            // Remove from arrays
            uploadedFiles.splice(index, 1);
            croppedImages.splice(index, 1);
            
            // Update the file input
            const dataTransfer = new DataTransfer();
            uploadedFiles.forEach(file => dataTransfer.items.add(file));
            document.getElementById('multiImageInput').files = dataTransfer.files;
            
            // Update the preview
            handleMultipleImageUpload({ target: { files: dataTransfer.files } });
        }

        function validateForm() {
            let isValid = true;
            clearErrorMessages();
            
            // Validate product name
            const productName = document.getElementById('product_name').value.trim();
            if (!productName) {
                displayErrorMessage('productName-error', 'Product name is required');
                isValid = false;
            }
            
            // Validate description
            const description = document.getElementById('descriptionid').value.trim();
            if (!description) {
                displayErrorMessage('description-error', 'Description is required');
                isValid = false;
            }
            
            // Validate prices
            const regularPrice = parseFloat(document.getElementsByName('regularPrice')[0].value);
            const salePrice = parseFloat(document.getElementsByName('salePrice')[0].value);
            
            if (isNaN(regularPrice) || regularPrice <= 0) {
                displayErrorMessage('regularPrice-error', 'Valid regular price is required');
                isValid = false;
            }
            
            if (isNaN(salePrice) || salePrice <= 0) {
                displayErrorMessage('salePrice-error', 'Valid sale price is required');
                isValid = false;
            }
            
            if (regularPrice <= salePrice) {
                displayErrorMessage('regularPrice-error', 'Regular price must be greater than sale price');
                isValid = false;
            }
            
            // Validate quantity
            const quantity = parseInt(document.getElementsByName('quantity')[0].value);
            if (isNaN(quantity) || quantity < 0) {
                displayErrorMessage('quantity-error', 'Valid quantity is required');
                isValid = false;
            }
            
            // Validate color
            const color = document.getElementsByName('color')[0].value.trim();
            if (!color) {
                displayErrorMessage('color-error', 'Color is required');
                isValid = false;
            }
            
            // Validate images
            if (uploadedFiles.length < 3) {
                displayErrorMessage('images-error', 'At least 3 images are required');
                isValid = false;
            }
            
            // If valid, prepare form data with cropped images
            if (isValid) {
                const form = document.getElementById('productForm');
                const formData = new FormData(form);
                
                // Replace original files with cropped versions
                formData.delete('images');
                croppedImages.forEach((croppedImage, index) => {
                    if (croppedImage) {
                        formData.append('images', croppedImage, `product-${index}.jpg`);
                    } else {
                        formData.append('images', uploadedFiles[index]);
                    }
                });
                
                // Submit the form
                fetch(form.action, {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (response.ok) {
                        window.location.href = '/admin/products';
                    } else {
                        throw new Error('Failed to submit form');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error submitting form: ' + error.message);
                });
            }
            
            return false;
        }

        function displayErrorMessage(elementId, message) {
            const element = document.getElementById(elementId);
            element.textContent = message;
            element.style.display = 'block';
        }

        function clearErrorMessage(elementId) {
            const element = document.getElementById(elementId);
            element.textContent = '';
            element.style.display = 'none';
        }

        function clearErrorMessages() {
            document.querySelectorAll('.error-message').forEach(element => {
                element.textContent = '';
                element.style.display = 'none';
            });
        }
    </script>





</body>
