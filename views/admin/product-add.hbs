<head>
    
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.css">
    <!-- SweetAlert CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <style>
        /* General Styles */
        .content-main {
            padding: 20px;
        }

        .content-header {
            margin-bottom: 20px;
        }

        .content-header h2 {
            font-size: 24px;
            font-weight: 600;
        }

        .card {
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .card-body {
            padding: 20px;
        }

        .form-label {
            font-weight: 500;
            margin-bottom: 8px;
            display: block;
        }

        .form-control, .form-select {
            border: 1px solid #ced4da;
            border-radius: 4px;
            padding: 8px 12px;
            width: 100%;
        }

        .btn {
            padding: 8px 16px;
            border-radius: 4px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background-color: #0d6efd;
            color: white;
            border: none;
        }

        .btn-primary:hover {
            background-color: #0b5ed7;
        }

        .hover-up:hover {
            transform: translateY(-2px);
        }

        /* Error Message Styles */
        .error-message {
            color: red;
            font-size: 0.9rem;
            margin-top: 4px;
            display: none;
        }

        /* Thumbnail Styles */
        .thumbnails-container {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            padding: 10px 0;
        }

        .thumbnail {
            position: relative;
            width: 100px;
            height: 100px;
        }

        .thumbnail img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 4px;
            border: 1px solid #ddd;
        }

        .thumbnail-actions {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            display: flex;
            justify-content: center;
            gap: 5px;
            padding: 5px;
            background: rgba(0,0,0,0.7);
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .thumbnail:hover .thumbnail-actions {
            opacity: 1;
        }

        .thumbnail-actions button {
            padding: 4px 8px;
            font-size: 11px;
            border: none;
            border-radius: 3px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .thumbnail-actions button:hover {
            transform: scale(1.05);
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1050;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.8);
            cursor: pointer;
        }

        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 20px;
            border-radius: 5px;
            max-width: 90%;
            max-height: 90%;
            cursor: default;
        }

        .modal-image-container {
            max-width: 80vw;
            max-height: 70vh;
        }

        .modal-image-container img {
            max-width: 100%;
            max-height: 100%;
        }

        .modal-actions {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-top: 15px;
        }

        /* Responsive Adjustments */
        @media (max-width: 768px) {
            .row {
                flex-direction: column;
            }
            
            .col-md-6 {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <section class="content-main">
        <div class="row">
            <div class="col-12">
                <div class="content-header">
                    <h2 class="content-title">Add New Product</h2>
                </div>
            </div>

            <div class="col-lg-12">
                <div class="card mb-4">
                    <div class="card-body">
                        <form method="POST" action="/admin/addProducts" enctype="multipart/form-data" id="productForm">
                            <!-- Product Info -->
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="product_name" class="form-label">Product Name</label>
                                    <input type="text" name="productName" class="form-control border" id="product_name" >
                                    <div id="productName-error" class="error-message"></div>
                                </div>
                                
                            </div>

                            <!-- Pricing and Quantity -->
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label class="form-label">Regular price</label>
                                    <input name="regularPrice" type="number" step="0.01" class="form-control border" >
                                    <div id="regularPrice-error" class="error-message"></div>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Sale price</label>
                                    <input name="salePrice" type="number" step="0.01" class="form-control border" >
                                    <div id="salePrice-error" class="error-message"></div>
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label class="form-label">Quantity</label>
                                    <input name="quantity" type="number" class="form-control border" min="0" >
                                    <div id="quantity-error" class="error-message"></div>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Color</label>
                                    <input name="color" type="text" class="form-control border" >
                                    <div id="color-error" class="error-message"></div>
                                </div>
                            </div>

                            <!-- Description -->
                            <div class="mb-4">
                                <label class="form-label">Full description</label>
                                <textarea name="description" class="form-control border" rows="3" id="descriptionid"></textarea>
                                <div id="description-error" class="error-message"></div>
                            </div>

                            <!-- Category -->
                            <div class="mb-4">
                                <label class="form-label">Category</label>
                                <select class="form-select border" name="category" >
                                        <option ></option>
                                    {{#each category}}
                                        <option value="{{this.name}}">{{this.name}}</option>
                                    {{/each}}
                                </select>
                                <div id="category-error" class="error-message"></div>
                            </div>

                            <!-- Image Uploads -->
                            <div class="mb-3">
                                <label for="multiImageInput" class="form-label">Upload Product Images (min 3)</label>
                                <input class="form-control" type="file" name="images" id="multiImageInput" multiple
                                    accept="image/png, image/jpeg, image/jpg" >
                                <div id="images-error" class="error-message"></div>
                            </div>

                            <div class="thumbnails-container" id="thumbnailPreview"></div>

                            <div class="mt-4">
                                <button class="btn btn-primary btn-lg" type="submit">Publish Product</button>
                                
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Cropping Modal -->
    <div id="cropModal" class="modal" onclick="closeModal(event)">
        <div class="modal-content" onclick="event.stopPropagation()">
            <div class="modal-image-container">
                <img id="modalImage" src="">
            </div>
            <div class="modal-actions">
                <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="saveCrop()">Save Crop</button>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.min.js"></script>
    <script>
        
        if (typeof Cropper === 'undefined') {
            console.log('Primary CDN failed, trying fallback...');
            const script = document.createElement('script');
            script.src = 'https://unpkg.com/cropperjs@1.5.12/dist/cropper.min.js';
            script.onload = function() {
                console.log('Fallback CDN loaded successfully');
            };
            script.onerror = function() {
                console.error('Both CDNs failed to load Cropper.js');
            };
            document.head.appendChild(script);
        }
    </script>
    <!-- SweetAlert JS -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>      
    <script src="/js/main.js"></script>
    <script src="/js/jquery.slicknav.js"></script>



    <script>

        // Global variables
        let cropper;
        let currentImageIndex;
        const uploadedFiles = [];
        const croppedImages = [];

       
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(() => {
                if (typeof Cropper === 'undefined') {
                    console.error('Cropper library not loaded!');
                    Swal.fire({
                        icon: 'error',
                        title: 'Library Error',
                        text: 'Image cropper library not loaded. Please refresh the page.',
                        confirmButtonText: 'OK'
                    });
                } else {
                    console.log('Cropper library loaded successfully');
                    console.log('Cropper version:', Cropper.version);
                }
            }, 1000); 
        });

       
        document.getElementById('productForm').addEventListener('submit', function(e) {
            e.preventDefault();
            console.log("Form submission started");
            if (validateForm()) {
                console.log("Form validation passed, submitting...");
                this.submit();
            } else {
                console.log("Form validation failed");
            }
        });



       
        document.getElementById('multiImageInput').addEventListener('change', function(e) {
            handleMultipleImageUpload(e);
        });

       
        document.addEventListener('click', function(e) {
            if (e.target.closest('.thumbnail-actions')) {
                e.preventDefault();
                e.stopPropagation();
            }
        });

        function handleMultipleImageUpload(event) {
            const files = event.target.files;
            const previewContainer = document.getElementById('thumbnailPreview');
            const errorElement = document.getElementById('images-error');
            
            
            previewContainer.innerHTML = '';
            uploadedFiles.length = 0;
            croppedImages.length = 0;
            
          
            if (files.length < 3) {
                displayErrorMessage('images-error', 'Please upload at least 3 images');
                showImageError('Please upload at least 3 images for the product.');
                return;
            } else {
                clearErrorMessage('images-error');
            }
            
            
            Array.from(files).forEach((file, index) => {
                uploadedFiles.push(file);
                croppedImages.push(null); 
                
                const reader = new FileReader();
                reader.onload = function(e) {
                    createThumbnail(index, e.target.result);
                };
                reader.readAsDataURL(file);
            });
        }

        function createThumbnail(index, imageSrc) {
            console.log('Creating thumbnail for index:', index);
            const previewContainer = document.getElementById('thumbnailPreview');
            
            const thumbnailDiv = document.createElement('div');
            thumbnailDiv.className = 'thumbnail';
            
            const img = document.createElement('img');
            img.src = imageSrc;
            img.dataset.index = index;
            
            const actionsDiv = document.createElement('div');
            actionsDiv.className = 'thumbnail-actions';
            
            const cropBtn = document.createElement('button');
            cropBtn.className = 'btn btn-sm btn-primary';
            cropBtn.type = 'button'; 
            cropBtn.textContent = 'Crop';
            cropBtn.onclick = (e) => {
                e.preventDefault();
                e.stopPropagation();
                console.log('Crop button clicked for index:', index);
                openCropper(index, imageSrc);
            };
            
            const removeBtn = document.createElement('button');
            removeBtn.className = 'btn btn-sm btn-danger';
            removeBtn.type = 'button'; 
            removeBtn.textContent = 'Remove';
            removeBtn.onclick = (e) => {
                e.preventDefault();
                e.stopPropagation();
                console.log('Remove button clicked for index:', index);
                removeImage(index);
            };
            
            actionsDiv.appendChild(cropBtn);
            actionsDiv.appendChild(removeBtn);
            thumbnailDiv.appendChild(img);
            thumbnailDiv.appendChild(actionsDiv);
            previewContainer.appendChild(thumbnailDiv);
            
            console.log('Thumbnail created for index:', index);
        }

        function openCropper(index, imageSrc) {
            console.log('Opening cropper for index:', index);
            console.log('Image source:', imageSrc);
            
           
            if (typeof Cropper === 'undefined') {
                console.error('Cropper library not available');
                Swal.fire({
                    icon: 'error',
                    title: 'Library Error',
                    text: 'Image cropper library not loaded. Please refresh the page and try again.',
                    confirmButtonText: 'OK'
                });
                return;
            }
            
            currentImageIndex = index;
            const modal = document.getElementById('cropModal');
            const modalImage = document.getElementById('modalImage');
            
            if (!modal || !modalImage) {
                console.error('Modal elements not found');
                Swal.fire({
                    icon: 'error',
                    title: 'Modal Error',
                    text: 'Modal elements not found',
                    confirmButtonText: 'OK'
                });
                return;
            }
            
            modal.style.display = 'block';
            modalImage.src = imageSrc;
            
          
            modalImage.onload = function() {
                console.log('Modal image loaded, initializing cropper');
                console.log('Image dimensions:', modalImage.naturalWidth, 'x', modalImage.naturalHeight);
                
                if (cropper) {
                    try {
                        cropper.destroy();
                    } catch (error) {
                        console.error('Error destroying previous cropper:', error);
                    }
                }
                
                try {
                    cropper = new Cropper(modalImage, {
                        aspectRatio: 1,
                        viewMode: 1,
                        autoCropArea: 0.8,
                        responsive: true,
                        guides: false,
                        ready: function() {
                            console.log('Cropper ready');
                        },
                        error: function(error) {
                            console.error('Cropper error:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Cropper Error',
                                text: 'Error during cropping: ' + error.message,
                                confirmButtonText: 'OK'
                            });
                        }
                    });
                    console.log('Cropper initialized successfully');
                } catch (error) {
                    console.error('Error initializing cropper:', error);
                    console.error('Error details:', {
                        name: error.name,
                        message: error.message,
                        stack: error.stack
                    });
                    Swal.fire({
                        icon: 'error',
                        title: 'Cropper Error',
                        text: 'Failed to initialize image cropper: ' + error.message,
                        confirmButtonText: 'OK'
                    });
                }
            };
            
           
            modalImage.onerror = function() {
                console.error('Failed to load image');
                Swal.fire({
                    icon: 'error',
                    title: 'Image Error',
                    text: 'Failed to load image for cropping',
                    confirmButtonText: 'OK'
                });
            };
        }

        function closeModal(event) {
            if (event) {
                event.preventDefault();
                event.stopPropagation();
            }
            console.log('Closing modal');
            const modal = document.getElementById('cropModal');
            modal.style.display = 'none';
            
            if (cropper) {
                try {
                    cropper.destroy();
                } catch (error) {
                    console.error('Error destroying cropper:', error);
                }
                cropper = null;
            }
        }

        function saveCrop(event) {
            if (event) {
                event.preventDefault();
                event.stopPropagation();
            }
            console.log('Saving crop for index:', currentImageIndex);
            if (cropper) {
                try {
                    const canvas = cropper.getCroppedCanvas({
                        width: 800,
                        height: 800,
                        minWidth: 256,
                        minHeight: 256,
                        fillColor: '#fff'
                    });
                    
                    canvas.toBlob(blob => {
                        
                        croppedImages[currentImageIndex] = blob;
                        
                       
                        const thumbnails = document.querySelectorAll('.thumbnail img');
                        if (thumbnails[currentImageIndex]) {
                            thumbnails[currentImageIndex].src = URL.createObjectURL(blob);
                        }
                        
                        closeModal();
                        
                        
                        Swal.fire({
                            icon: 'success',
                            title: 'Image Cropped!',
                            text: 'Image has been cropped successfully.',
                            timer: 1500,
                            showConfirmButton: false
                        });
                    }, 'image/jpeg', 0.9);
                } catch (error) {
                    console.error('Error saving crop:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Crop Error',
                        text: 'Failed to save cropped image',
                        confirmButtonText: 'OK'
                    });
                }
            } else {
                console.error('No cropper instance found');
                Swal.fire({
                    icon: 'error',
                    title: 'Crop Error',
                    text: 'No cropper instance found',
                    confirmButtonText: 'OK'
                });
            }
        }

        function removeImage(index) {
            
            Swal.fire({
                title: 'Remove Image?',
                text: 'Are you sure you want to remove this image?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, remove it!',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                   
                    uploadedFiles.splice(index, 1);
                    croppedImages.splice(index, 1);
                    
                    
                    const dataTransfer = new DataTransfer();
                    uploadedFiles.forEach(file => dataTransfer.items.add(file));
                    document.getElementById('multiImageInput').files = dataTransfer.files;
                    
                   
                    recreateThumbnails();
        
                    Swal.fire({
                        icon: 'success',
                        title: 'Image Removed!',
                        text: 'Image has been removed successfully.',
                        timer: 1000,
                        showConfirmButton: false
                    });
                }
            });
        }

        function recreateThumbnails() {
            const previewContainer = document.getElementById('thumbnailPreview');
            previewContainer.innerHTML = '';
            
          
            uploadedFiles.forEach((file, index) => {
                const reader = new FileReader();
                reader.onload = function(e) {
                    createThumbnail(index, e.target.result);
                };
                reader.readAsDataURL(file);
            });
        }

        function validateForm() {
            let isValid = true;
            clearErrorMessages();
            
           
            const productName = document.getElementById('product_name').value.trim();
            if (!productName) {
                displayErrorMessage('productName-error', 'Product name is required');
                isValid = false;
            }
            
           
            const description = document.getElementById('descriptionid').value.trim();
            if (!description) {
                displayErrorMessage('description-error', 'Description is required');
                isValid = false;
            }
            
            
            const regularPrice = parseFloat(document.getElementsByName('regularPrice')[0].value);
            const salePrice = parseFloat(document.getElementsByName('salePrice')[0].value);
            
            if (isNaN(regularPrice) || regularPrice <= 0) {
                displayErrorMessage('regularPrice-error', 'Valid regular price is required');
                isValid = false;
            }
            
            if (isNaN(salePrice) || salePrice <= 0) {
                displayErrorMessage('salePrice-error', 'Valid sale price is required');
                isValid = false;
            }
            
            if (regularPrice <= salePrice) {
                displayErrorMessage('regularPrice-error', 'Regular price must be greater than sale price');
                isValid = false;
            }
            
           
            const quantity = parseInt(document.getElementsByName('quantity')[0].value);
            if (isNaN(quantity) || quantity < 5) {
                displayErrorMessage('quantity-error', 'Quantity should be more than five');
                isValid = false;
            }
            
            
            const color = document.getElementsByName('color')[0].value.trim();
            if (!color) {
                displayErrorMessage('color-error', 'Color is required');
                isValid = false;
            }
            
            
            if (uploadedFiles.length < 3) {
                displayErrorMessage('images-error', 'At least 3 images are required');
                isValid = false;
            }
            
                            
                if (isValid) {
                    const form = document.getElementById('productForm');
                    const formData = new FormData(form);
                    
                    console.log("Form element:", form);
                    console.log("Form action:", form.action);
                    console.log("Form method:", form.method);
                
                                   
                    formData.delete('images');
                    croppedImages.forEach((croppedImage, index) => {
                        if (croppedImage) {
                            formData.append('images', croppedImage, `product-${index}.jpg`);
                        } else {
                            formData.append('images', uploadedFiles[index]);
                        }
                    });
                    
                    console.log("FormData prepared with files");
                
                
                Swal.fire({
                    title: 'Adding Product...',
                    text: 'Please wait while we process your product',
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    showConfirmButton: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });
                
               
              
                for (let [key, value] of formData.entries()) {
                    console.log(key, value);
                }

                fetch(form.action, {
                    method: "POST",
                    body: formData,
                })
                .then((response) => {
                    console.log('Response status:', response.status);
                    console.log('Response headers:', response.headers);
                    
                   
                    const contentType = response.headers.get('content-type');
                    if (contentType && contentType.includes('application/json')) {
                        return response.json();
                    } else {
                       
                        return response.text().then(text => {
                            console.log('Non-JSON response:', text);
                            throw new Error(`Server returned non-JSON response: ${text}`);
                        });
                    }
                })
                .then((data) => {
                    console.log('Response data:', data);
                    if (data.success) {
                        
                        Swal.fire({
                            icon: 'success',
                            title: 'Success!',
                            text: data.message || 'Product added successfully!',
                            confirmButtonText: 'View Products',
                            confirmButtonColor: '#28a745'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                window.location.href = "/admin/products";
                            }
                        });
                    } else {
                        
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: data.message || 'Something went wrong',
                            confirmButtonText: 'Try Again',
                            confirmButtonColor: '#dc3545'
                        });
                    }
                })
                .catch((error) => {
                    console.error("Form submission error:", error);
                    console.error("Error details:", {
                        name: error.name,
                        message: error.message,
                        stack: error.stack
                    });
                    
                    
                    Swal.fire({
                        icon: 'error',
                        title: 'Submission Failed!',
                        text: error.message || 'Network error occurred',
                        confirmButtonText: 'OK',
                        confirmButtonColor: '#dc3545'
                    });
                });
            }
            
            return false;
        }

        function displayErrorMessage(elementId, message) {
            const element = document.getElementById(elementId);
            element.textContent = message;
            element.style.display = 'block';
        }

        function clearErrorMessage(elementId) {
            const element = document.getElementById(elementId);
            element.textContent = '';
            element.style.display = 'none';
        }

        function clearErrorMessages() {
            document.querySelectorAll('.error-message').forEach(element => {
                element.textContent = '';
                element.style.display = 'none';
            });
        }

        // Function for SweetAlert - validation errors
        function showValidationError(title, message) {
            Swal.fire({
                icon: 'warning',
                title: title,
                text: message,
                confirmButtonText: 'OK',
                confirmButtonColor: '#ffc107'
            });
        }

        // Function for SweetAlert - image upload errors
        function showImageError(message) {
            Swal.fire({
                icon: 'error',
                title: 'Image Upload Error',
                text: message,
                confirmButtonText: 'OK',
                confirmButtonColor: '#dc3545'
            });
        }
    
    </script>
</body>
